#define InvLog2 3.32192809489f

#define InvPIE 0.318309886142f
#define InvPIE8 0.039788735767f
#define InvPIE4 0.079577471535f

#define PI 3.1415926535f
#define PI_2 (3.1415926535f * 2.0)

#define ALN2I 1.442695022

#define EPSILON 1e-5f

#define MIDPOINT_8_BIT (127.0f / 255.0f)

float  pow2(float x)  { return x * x; }
float2 pow2(float2 x) { return x * x; }
float3 pow2(float3 x) { return x * x; }
float4 pow2(float4 x) { return x * x; }

float  pow5(float x)  { float  xx = x * x; return xx * xx * x; }
float2 pow5(float2 x) { float2 xx = x * x; return xx * xx * x; }
float3 pow5(float3 x) { float3 xx = x * x; return xx * xx * x; }
float4 pow5(float4 x) { float4 xx = x * x; return xx * xx * x; }

float sum(float2 v) { return dot(v, 1.0); }
float sum(float3 v) { return dot(v, 1.0); }
float sum(float4 v) { return dot(v, 1.0); }

float  madd(float v , float t1 , float t2 ) { return v * t1 + t2; }
float2 madd(float2 v, float2 t1, float2 t2) { return v * t1 + t2; }
float3 madd(float3 v, float3 t1, float3 t2) { return v * t1 + t2; }
float4 madd(float4 v, float4 t1, float4 t2) { return v * t1 + t2; }

float length2(float2 v) { return dot(v, v); }
float length2(float3 v) { return dot(v, v); }
float length2(float4 v) { return dot(v, v); }

float min2(float2 v) { return min(v.x, v.y); }
float max3(float3 v) { return max(v.x, max(v.y, v.z)); }

float4 ComputeScreenPos(float4 pos)
{
	return float4(mad(pos.xy, float2(0.5, -0.5), float2(0.5, 0.5) * pos.w), pos.zw);
}

float2 PosToCoord(float2 position)
{
	return mad(position, float2(0.5, -0.5), float2(0.5, 0.5));
}

float4 PosToCoord(float4 position)
{
	return mad(position, float4(0.5, -0.5, 0.5, -0.5), float4(0.5, 0.5, 0.5, 0.5));
}

float2 CoordToPos(float2 coord)
{
	return coord * float2(2, -2) + float2(-1, 1);
}

float3x3 CreateRotate(float3 euler)
{
	float sj, cj, si, ci, sh, ch;

	sincos(euler.x, si, ci);
	sincos(euler.y, sj, cj);
	sincos(euler.z, sh, ch);

	float cc = ci * ch;
	float cs = ci * sh;
	float sc = si * ch;
	float ss = si * sh;

	float a1 = cj * ch;
	float a2 = sj * sc - cs;
	float a3 = sj * cc + ss;

	float b1 = cj * sh;
	float b2 = sj * ss + cc;
	float b3 = sj * cs - sc;

	float c1 = -sj;
	float c2 = cj * si;
	float c3 = cj * ci;
	
	float3x3 rotate;
	rotate[0] = float3(a1, a2, a3);
	rotate[1] = float3(b1, b2, b3);
	rotate[2] = float3(c1, c2, c3);
	
	return rotate;
}

float2 ComputeSphereCoord(float3 normal)
{
#if IBL_QUALITY > 1
	normal = clamp(normal, -1.0, 1.0);
	float2 coord = float2((atan2(normal.x, normal.z) * InvPIE * 0.5f + 0.5f), acos(normal.y) * InvPIE);
#else
	normal = clamp(normal, -1.0, 1.0);
	float2 coord = float2(1 - (atan2(normal.x, normal.z) * InvPIE * 0.5f + 0.5f), acos(normal.y) * InvPIE);
#endif
	return coord;
}

float2 SampleLatlong(float3 normal)
{
#if IBL_QUALITY > 1
	normal = clamp(normal, -1.0, 1.0);
	float2 coord = float2((atan2(normal.x, normal.z) * InvPIE * 0.5f + 0.5f), acos(normal.y) * InvPIE);
#else
	normal = clamp(normal, -1.0, 1.0);
	float2 coord = float2(1 - (atan2(normal.x, normal.z) * InvPIE * 0.5f + 0.5f), acos(normal.y) * InvPIE);
#endif
	return coord;
}

float3 ComputeSphereNormal(float2 coord, float phiStart = 0.0, float phiLength = PI_2, float thetaStart = 0, float thetaLength = PI)
{
	float3 normal;
	normal.x =  sin(thetaStart + coord.y * thetaLength) * sin(phiStart + coord.x * phiLength);
	normal.y =  cos(thetaStart + coord.y * thetaLength);
	normal.z = -sin(thetaStart + coord.y * thetaLength) * cos(phiStart + coord.x * phiLength);
	return normal;
}

float GetJitterOffset(float2 uv)
{
	return dot(frac(uv * 0.25), float2(1.0, 0.25));
}

float PseudoRandom(float2 xy)
{
    float2 pos = frac(xy / 128.0f) * 128.0f + float2(-64.340622f, -72.465622f);
    return frac(dot(pos.xyx * pos.xyy, float3(20.390625f, 60.703125f, 2.4281209f)));
}

float InterleavedGradientNoise(float2 pixCoord, int frameCount = 0)
{
    const float3 magic = float3(0.06711056f, 0.00583715f, 52.9829189f);
    float2 frameMagicScale = float2(2.083f, 4.867f);
    pixCoord += frameCount * frameMagicScale;
    return frac(magic.z * frac(dot(pixCoord, magic.xy)));
}

float BilateralWeight(float r, float depth, float center_d, float sigma, float sharpness)
{
	const float blurSigma = sigma * 0.5f;
	const float blurFalloff = 1.0f / (2.0f * blurSigma * blurSigma);
	float ddiff = (depth - center_d) * sharpness;
	return exp(-r * r * blurFalloff - ddiff * ddiff);
}

float SmoothCurve(float x)
{
	return x * x * (3.0 - 2.0 * x);
}

float3 SmoothCurve(float3 x)
{
	return x * x * (3.0 - 2.0 * x);
}

float TriangleWave(float x)
{
	return abs(frac(x + 0.5) * 2.0 - 1.0);
}

float3 TriangleWave(float3 x)
{
	return abs(frac(x + 0.5) * 2.0 - 1.0);
}

float SmoothTriangleWave(float x)
{
	return SmoothCurve(TriangleWave(x));
}

float3 SmoothTriangleWave(float3 x)
{
	return SmoothCurve(TriangleWave(x));
}

float2 Rotate(float2 pos, float2 rotation)
{
	return float2(pos.x * rotation.x - pos.y * rotation.y, pos.y * rotation.x + pos.x * rotation.y);
}

float w0(float a)
{
	return (1.0/6.0)*(a*(a*(-a + 3.0) - 3.0) + 1.0);
}

float w1(float a)
{
	return (1.0/6.0)*(a*a*(3.0*a - 6.0) + 4.0);
}

float w2(float a)
{
	return (1.0/6.0)*(a*(a*(-3.0*a + 3.0) + 3.0) + 1.0);
}

float w3(float a)
{
	return (1.0/6.0)*(a*a*a);
}

float g0(float a)
{
	return w0(a) + w1(a);
}

float g1(float a)
{
	return w2(a) + w3(a);
}

float h0(float a)
{
	return -1.0 + w1(a) / (w0(a) + w1(a));
}

float h1(float a)
{
	return 1.0 + w3(a) / (w2(a) + w3(a));
}

float4 tex2D_bicubic(sampler tex, float2 uv, float2 res)
{
	uv = uv * res;

	float2 iuv = floor(uv);
	float2 fuv = frac(uv);

	float g0x = g0(fuv.x);
	float g1x = g1(fuv.x);
	float h0x = h0(fuv.x);
	float h1x = h1(fuv.x);
	float h0y = h0(fuv.y);
	float h1y = h1(fuv.y);

	float2 p0 = float2(iuv.x + h0x, iuv.y + h0y) / res;
	float2 p1 = float2(iuv.x + h1x, iuv.y + h0y) / res;
	float2 p2 = float2(iuv.x + h0x, iuv.y + h1y) / res;
	float2 p3 = float2(iuv.x + h1x, iuv.y + h1y) / res;

	float4 t0 = tex2Dlod(tex, float4(p0, 0, 0));
	float4 t1 = tex2Dlod(tex, float4(p1, 0, 0));
	float4 t2 = tex2Dlod(tex, float4(p2, 0, 0));
	float4 t3 = tex2Dlod(tex, float4(p3, 0, 0));		

	return g0(fuv.y) * ((g0x * t0) + g1x * t1) + g1(fuv.y) * (g0x * t2 + g1x * t3);
}

// Ray Tracing Calculation