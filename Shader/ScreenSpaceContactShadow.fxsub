#define CONTACT_SHADOW_SAMPLES 6

float4 ScreenSpaceContactShadowFragment(in float4 uv : TEXCOORD0) : COLOR
{
	MaterialParam material = SampleTransparentGbuffer(uv.xy);
	clip(any(material.visibility) - 1e-5);

	float rayLength = max(0.5, 0.01 * material.linearDepth);
	float rayStep = 1.0f / CONTACT_SHADOW_SAMPLES;
	float raySampleTime = rayStep * (1 + InterleavedGradientNoise(uv.zw));

	float3 viewPosition = ComputeViewSpacePosition(uv.xy, material.linearDepth);

	float4 rayStartClip = mul(float4(viewPosition, 1.0f), matProject);
	float4 rayEndClip = mul(float4(viewPosition + mul(-MainLightDirection * rayLength, (float3x3)matView), 1.0f), matProject);

	float4 rayStartScreen = ComputeScreenPos(rayStartClip);
	float4 rayEndScreen = ComputeScreenPos(rayEndClip);

	rayStartScreen.xy /= rayStartClip.w;
	rayEndScreen.xy /= rayEndClip.w;

	float4 rayStepScreen = rayEndScreen - rayStartScreen;

	float3 rayStartUVz = float3(rayStartScreen.xy, material.linearDepth);
	float3 rayStepUVz = float3(rayStepScreen.xy, rayStepScreen.w);

	float4 rayDepthClip = rayStartClip + mul(float4(0, 0, rayLength, 0), matProject);
	float4 rayDepthScreen = float4(rayDepthClip.xyz / rayDepthClip.w, rayDepthClip.w);

	float firstHitTime = -1.0;
	float compareTolerance = abs(rayDepthScreen.w - rayStartClip.w) * rayStep * 2;

	for (uint i = 0; i < CONTACT_SHADOW_SAMPLES; i++, raySampleTime += rayStep)
	{
		float3 sampleUVz = rayStartUVz + rayStepUVz * raySampleTime;

		float sampleDepth = SampleLinearEyeDepth(sampleUVz.xy + ViewportOffset);
		float sampleDepthDiff = sampleDepth - sampleUVz.z;

		bool hit = abs(sampleDepthDiff + compareTolerance) < compareTolerance;

		if (hit)
		{
			firstHitTime = raySampleTime;
			break;
		}
	}

	float2 borderCheck = abs(rayEndScreen.xy) - 1;

	return (firstHitTime >= 0.0 && borderCheck.x <= 0.0f && borderCheck.y <= 0.0f ? 0.0f : 1.0f);
}