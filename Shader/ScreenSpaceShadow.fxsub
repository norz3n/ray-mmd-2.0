static float4x4 matLightProject = CreateOrthoProject(2, 2, mPSSMDepthZMin, mPSSMDepthZMax);
static float4x4 matLightView = CreateLightViewMatrix(MainLightDirection, -MainLightDirection * mLightDistance);
static float4x4 matLightViewProject = mul(matLightView, matLightProject);
static float4x4 matLightViewFromCameraView = mul(matViewInverse, matLightView);
static float4x4 matLightProjectFromCameraView = mul(matViewInverse, matLightViewProject);
static float4x4 lightCropParams = CreateLightCropParams(matLightViewFromCameraView, mPSSMCascadeDistance, mPSSMCascadeSplits, CASCADE_SHADOW_MAP_SIZE);

#if defined(CASCADE_SHADOW_PCSS)
float2 FindBlocker(sampler _ShadowTex, float2 uv, float depth, float2 searchRadius, float2 rotation)
{
    float blockerWeight = 0;
    float blockerDepthSum = 0.0;

    for (int i = 0; i < CASCADE_SHADOW_BLOCKER_COUNT; i++)
    {
		float sampleDepth = 1 - tex2Dlod(_ShadowTex, float4(uv + Rotate(CASCADE_SHADOW_BLOCKER_POISSON[i], rotation) * searchRadius, 0, 0)).r;
        if (sampleDepth < depth)
        {
            blockerDepthSum += sampleDepth;
            blockerWeight++;
        }
    }

    return float2(blockerDepthSum / max(1e-5, blockerWeight), blockerWeight);
}
#endif

float ShadowPCF(sampler _ShadowTex, float2 uv, float radius, float linearDepth, float receiverDepth, float2 rotation)
{
#if defined(CASCADE_SHADOW_PCSS)
	float2 searchRegionRadius = SearchRegionRadius(radius, linearDepth, mPSSMDepthZMin);
	float2 blocker = FindBlocker(_ShadowTex, uv, receiverDepth, searchRegionRadius, rotation);

	float avgBlockerDepth = blocker.x;
	float penumbraRatio = PenumbraRadius(radius, receiverDepth, avgBlockerDepth);
	float filterSize = ProjectToLight(penumbraRatio, receiverDepth, 1);

	[branch]
	if (blocker.y <= 0)
	{
		return 1;
	}
#else
	float filterSize = radius * 0.01;
#endif

	float shadow = 0.0;

	[unroll]
	for (int i = 0; i < CASCADE_SHADOW_POISSON_COUNT; i+=4) 
	{
		float2 samplePoints[4];
		samplePoints[0] = Rotate(CASCADE_SHADOW_POISSON[i], rotation);
		samplePoints[1] = Rotate(CASCADE_SHADOW_POISSON[i+1], rotation);
		samplePoints[2] = Rotate(CASCADE_SHADOW_POISSON[i+2], rotation);
		samplePoints[3] = Rotate(CASCADE_SHADOW_POISSON[i+3], rotation);
		
		float4 sampleLinearDepth;
		sampleLinearDepth[0] = tex2Dlod(_ShadowTex, float4(uv + samplePoints[0] * filterSize, 0, 0)).r;
		sampleLinearDepth[1] = tex2Dlod(_ShadowTex, float4(uv + samplePoints[1] * filterSize, 0, 0)).r;
		sampleLinearDepth[2] = tex2Dlod(_ShadowTex, float4(uv + samplePoints[2] * filterSize, 0, 0)).r;
		sampleLinearDepth[3] = tex2Dlod(_ShadowTex, float4(uv + samplePoints[3] * filterSize, 0, 0)).r;

		sampleLinearDepth = 1 - sampleLinearDepth;

		shadow += sum(saturate(exp(mPSSMDepthZMax * 20 * (sampleLinearDepth - receiverDepth))));
	}
    
	return shadow / CASCADE_SHADOW_POISSON_COUNT;
}

float4 ScreenSpaceShadowMapFragment(
	in float4 uv : TEXCOORD0,
	in float3 viewdir : TEXCOORD1) : COLOR
{
	MaterialParam material = SampleTransparentGbuffer(uv.xy);
	clip(any(material.visibility) - 1e-5);

	float3 view = normalize(viewdir);
	float3 viewPosition = ComputeViewSpacePosition(uv.xy, SampleLinearEyeDepth(uv.xy));

	float4 proj = mul(float4(viewPosition, 1), matLightProjectFromCameraView);

	float4 lightPPos01 = mad(proj.xyxy, float4(lightCropParams[0].xy, lightCropParams[1].xy), float4(lightCropParams[0].zw, lightCropParams[1].zw));
	float4 lightPPos23 = mad(proj.xyxy, float4(lightCropParams[2].xy, lightCropParams[3].xy), float4(lightCropParams[2].zw, lightCropParams[3].zw));

	float4 lightCoord01 = PosToCoord(lightPPos01);
	float4 lightCoord23 = PosToCoord(lightPPos23);

	float4 lightPPos0 = float4(lightCoord01.xy, min2(float2(1, 1) - abs(lightPPos01.xy)), 0);
	float4 lightPPos1 = float4(lightCoord01.zw, min2(float2(1, 1) - abs(lightPPos01.zw)), 1);
	float4 lightPPos2 = float4(lightCoord23.xy, min2(float2(1, 1) - abs(lightPPos23.xy)), 2);
	float4 lightPPos3 = float4(lightCoord23.zw, min2(float2(1, 1) - abs(lightPPos23.zw)), 3);

	float4 coord = lightPPos3;
	if (lightPPos2.z > 0) { coord = lightPPos2; }
	if (lightPPos1.z > 0) { coord = lightPPos1; }
	if (lightPPos0.z > 0) { coord = lightPPos0; }
	clip(coord.z);

	float linearDepth = dot(float4(viewPosition, 1), matLightViewFromCameraView._13_23_33_43);
	float receiverDepth = linearDepth / mPSSMDepthZMax;

	coord.xy += 0.5 / float(CASCADE_SHADOW_MAP_SIZE);

	[branch]
	if (coord.w == 0)
		clip(tex2Dlod(_PSSM1_LinearSampler, float4(coord.xy, 0, 0)).r - 1e-5);
	else if (coord.w == 1)
		clip(tex2Dlod(_PSSM2_LinearSampler, float4(coord.xy, 0, 0)).r - 1e-5);
	else if (coord.w == 2)
		clip(tex2Dlod(_PSSM3_LinearSampler, float4(coord.xy, 0, 0)).r - 1e-5);
	else
		clip(tex2Dlod(_PSSM4_LinearSampler, float4(coord.xy, 0, 0)).r - 1e-5);

	float shadow = 0;
	float lightSize = 0.04; 
	float angle = PseudoRandom(uv.zw) * PI_2;
	float2 rotation = float2(cos(angle), sin(angle));
	float4 receiverDepth4 = mad(-float4(0.0015, 0.002, 0.002, 0.0025) / mPSSMDepthZMax, material.linearDepth, receiverDepth); 

	[branch]
	if (coord.w == 0)
		shadow = ShadowPCF(_PSSM1_LinearSampler, coord.xy, lightSize, linearDepth, receiverDepth4.x, rotation);
	else if (coord.w == 1)
		shadow = ShadowPCF(_PSSM2_LinearSampler, coord.xy, lightSize / 2.0, linearDepth, receiverDepth4.y, rotation);
	else if (coord.w == 2)
		shadow = ShadowPCF(_PSSM3_LinearSampler, coord.xy, lightSize / 4.0, linearDepth, receiverDepth4.z, rotation);
	else
		shadow = ShadowPCF(_PSSM4_LinearSampler, coord.xy, lightSize / 13.5, linearDepth, receiverDepth4.w, rotation);

	return shadow;
}

float4 ScreenSpaceShadowMapBilateralFilterPS(float2 coord : TEXCOORD0, uniform sampler source, uniform float2 offset) : COLOR
{
	float2 offset1 = coord + offset;
	float2 offset2 = coord - offset;

	float totalWeight = 1;
	float totalColor = tex2Dlod(source, float4(coord, 0, 0)).r;

	float center_d = SampleLinearEyeDepth(coord);

	[unroll]
	for(int r = 1; r < CASCADE_SHADOW_BLUR_COUNT; r++)
	{
		float shadow1 = tex2Dlod(source, float4(offset1, 0, 0)).r;
		float shadow2 = tex2Dlod(source, float4(offset2, 0, 0)).r;

		float depth1 = SampleLinearEyeDepth(offset1);
		float depth2 = SampleLinearEyeDepth(offset2);

		float bilateralWeight1 = BilateralWeight(r, depth1, center_d, CASCADE_SHADOW_BLUR_COUNT, 10);
		float bilateralWeight2 = BilateralWeight(r, depth2, center_d, CASCADE_SHADOW_BLUR_COUNT, 10);

		totalColor += shadow1 * bilateralWeight1;
		totalColor += shadow2 * bilateralWeight2;

		totalWeight += bilateralWeight1;
		totalWeight += bilateralWeight2;

		offset1 += offset;
		offset2 -= offset;
	}

	return totalColor / totalWeight;
}